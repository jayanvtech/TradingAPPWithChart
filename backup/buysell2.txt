import 'dart:ffi';
import 'dart:math';
import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:fl_chart/fl_chart.dart';

import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:keyboard_dismisser/keyboard_dismisser.dart';
import 'package:provider/provider.dart';

import 'package:tradingapp/GetApiService/apiservices.dart';
import 'package:tradingapp/Utils/exchangeConverter.dart';
import 'package:tradingapp/Sockets/market_feed_scoket.dart';

class BuySellScreen extends StatefulWidget {
  final String exchangeInstrumentId;
  final String exchangeSegment;
  final String lastTradedPrice;
  final String close;
  final String displayName;
  final bool isBuy;
  final String? lotSize;

  BuySellScreen({
    Key? key,
    required this.exchangeInstrumentId,
    required this.exchangeSegment,
    required this.lastTradedPrice,
    required this.close,
    required this.displayName,
    required this.isBuy,
    required this.lotSize,
  }) : super(key: key);

  @override
  State<BuySellScreen> createState() => _BuySellScreenState();
}

class _BuySellScreenState extends State<BuySellScreen> {
  final _formKey = GlobalKey<FormState>();
  GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  List<int> quantitySuggestions = [10, 15, 50, 100];

  late TextEditingController _controller;
  final TextEditingController limitPriceController = TextEditingController();
  final TextEditingController quantityController =
      TextEditingController(text: '1');
  final TextEditingController stopLossTriggerPriceController =
      TextEditingController();
  final TextEditingController stopLossLimitPriceController =
      TextEditingController();
  String _selectedOption = 'Limit';
  String _selectedProductType = 'NRML';
  bool _isStopLossEnabled = false;
  String selectedMarket = 'NSE'; // Tracks which market is selected
  bool isBuy = true;
  bool _showQuantitySuggestions = false;

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController(text: widget.lastTradedPrice);
    isBuy = widget.isBuy;
  }

  @override
  void dispose() {
    _controller.dispose();
    stopLossTriggerPriceController.dispose();
    stopLossLimitPriceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      bottomSheet:
       Container(color: Colors.transparent,
        padding: EdgeInsets.all(10),
                          width: double.infinity,
                          height: 70,
                          child: ElevatedButton(
                            onPressed: () async {
                              if (_formKey.currentState!.validate()) {
                                print("Form is valid");
                              } else {
                                print("Form is invalid");
                              }
                              final finalquantiy = int.parse(
                                      quantityController.text.toString()) *
                                  int.parse(widget.lotSize.toString());
                              final orderDetails = {
                                "clientID": "A0031",
                                "userID": "A0031",
                                "exchangeSegment": ExchangeConverter()
                                    .getExchangeSegmentName(
                                        int.parse(widget.exchangeSegment))
                                    .toString(),
                                "exchangeInstrumentID":
                                    widget.exchangeInstrumentId.toString(),
                                "productType": _selectedProductType,
                                "orderType": _selectedOption,
                                "orderSide": isBuy ? "BUY" : "SELL",
                                "timeInForce": "DAY",
                                "disclosedQuantity": "0",
                                "orderQuantity": finalquantiy.toString(),
                                "limitPrice": _controller.text,
                                "stopPrice": _isStopLossEnabled &&
                                        stopLossTriggerPriceController
                                            .text.isNotEmpty
                                    ? int.parse(
                                        stopLossLimitPriceController.text)
                                    : 0, //    "stopLimitPrice": _isStopLossEnabled ? stopLossLimitPriceController.text.toString() : null,
                              };

                              print(orderDetails);
                              try {
                                final response = await ApiService().placeOrder(
                                    orderDetails, widget.displayName, context);
                                // ScaffoldMessenger.of(context).showSnackBar(
                                //   SnackBar(
                                //     content: Text('Order placed successfully!'),
                                //   ),
                                // );
                              } catch (error) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content:
                                        Text('Failed to place order: $error'),
                                  ),
                                );
                              }
                            },
                            child: Text(
                                isBuy ? "Place Buy Order" : "Place Sell Order"),
                            style: ButtonStyle(
                              backgroundColor:
                                  MaterialStateProperty.all<Color>(Colors.blue),
                              foregroundColor: MaterialStateColor.resolveWith(
                                  (states) => Colors.white),
                              shape: MaterialStateProperty.all<
                                  RoundedRectangleBorder>(
                                RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                            ),
                          ),
                        ),
      backgroundColor: Colors.white,
      appBar: AppBar(
        scrolledUnderElevation: 0,
        backgroundColor: Colors.white,
        title: Consumer<MarketFeedSocket>(builder: (context, data, child) {
          final marketData =
              data.getDataById(int.parse(widget.exchangeInstrumentId));
          final priceChange = marketData != null
              ? double.parse(marketData.price) - double.parse(widget.close)
              : 0;
          final priceChangeColor = priceChange > 0 ? Colors.green : Colors.red;

          return Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(widget.displayName),
                    Text(
                      ExchangeConverter().getExchangeSegmentName(
                          int.parse(widget.exchangeSegment)),
                      style: TextStyle(fontSize: 12),
                    ),
                  ],
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Row(
                      children: [
                        Container(
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: isBuy
                                    ? Colors.green
                                    : const Color.fromARGB(255, 228, 233, 237)),
                            child: TextButton(
                                onPressed: () {
                                  setState(() {
                                    isBuy = true;
                                  });
                                },
                                child: Text(
                                  "BUY",
                                  style: TextStyle(
                                      color:
                                          isBuy ? Colors.white : Colors.green),
                                ))),
                        SizedBox(width: 10),
                        Container(
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: !isBuy
                                    ? Colors.red
                                    : const Color.fromARGB(255, 228, 233, 237)),
                            child: TextButton(
                                onPressed: () {
                                  setState(() {
                                    isBuy = false;
                                    print(isBuy);
                                  });
                                },
                                child: Text(
                                  "SELL",
                                  style: TextStyle(
                                      color:
                                          !isBuy ? Colors.white : Colors.red),
                                ))),
                        //     Text(
                        //     Text(
                        //       "â‚¹" + (marketData?.price.toString() ?? 'N/A'),
                        //       style: TextStyle(color: priceChangeColor, fontSize: 18),
                        //     ),
                        //     Icon(
                        //       Icons.arrow_drop_up,
                        //       color: priceChangeColor,
                        //     ),
                        //   ],
                        // ),
                        // Text(
                        //   "${priceChange.toStringAsFixed(2)}(${marketData?.percentChange ?? 0}%)",
                        //   style: TextStyle(color: priceChangeColor, fontSize: 15),
                        // )
                      ],
                    ),
                  ],
                )
              ]);
        }),
      ),
      body: SingleChildScrollView(
        child: KeyboardDismisser(
          gestures: [
            GestureType.onTap,
            GestureType.onDoubleTap,
            GestureType.onLongPress
          ],
          child: Form(
            key: _formKey,
            child: Container(
              padding: EdgeInsets.all(15),
              child:
                  Consumer<MarketFeedSocket>(builder: (context, data, child) {
                final marketData =
                    data.getDataById(int.parse(widget.exchangeInstrumentId));
                double totalCost = 0.0;
                double quantity = 1.0;
                double price = 0.0;

                try {
                  quantity = double.parse(quantityController.text);
                } catch (e) {
                  print("Error parsing quantity: ${e.toString()}");
                  // Optionally, show an error message to the user
                }

                try {
                  price = double.parse(marketData!.price);
                } catch (e) {
                  print("Error parsing price: ${e.toString()}");
                  // Optionally, show an error message to the user
                }

                totalCost = quantity * price;

                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Expanded(
                                  child: GestureDetector(
                                    onTap: () =>
                                        setState(() => selectedMarket = 'NSE'),
                                    child: Container(
                                        height: 61,
                                        decoration: BoxDecoration(
                                          color: selectedMarket == 'NSE'
                                              ? Colors.blue
                                              : const Color.fromARGB(
                                                  255, 228, 233, 237)!,
                                          borderRadius: BorderRadius.horizontal(
                                              left: Radius.circular(10)),
                                        ),
                                        child: Container(
                                          padding: EdgeInsets.all(10),
                                          child: Column(
                                            mainAxisAlignment:
                                                MainAxisAlignment.start,
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                "NSE",
                                                style: TextStyle(
                                                    color:
                                                        selectedMarket == 'NSE'
                                                            ? Colors.white
                                                            : Colors.grey,
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 15),
                                              ),
                                              Row(
                                                children: [
                                                  Text(
                                                    marketData?.price
                                                            .toString() ??
                                                        'N/A',
                                                    style: TextStyle(
                                                      color: selectedMarket ==
                                                              'NSE'
                                                          ? Colors.white
                                                          : Colors.grey,
                                                    ),
                                                  ),
                                                  Text(
                                                    " (${marketData?.percentChange.toString()}%)" ??
                                                        'N/A',
                                                    style: TextStyle(
                                                      color: selectedMarket ==
                                                              'NSE'
                                                          ? Colors.white
                                                          : Colors.grey,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ],
                                          ),
                                        )),
                                  ),
                                ),
                                Expanded(
                                  child: GestureDetector(
                                    onTap: () =>
                                        setState(() => selectedMarket = 'BSE'),
                                    child: Container(
                                      height: 61,
                                      decoration: BoxDecoration(
                                        color: selectedMarket == 'BSE'
                                            ? Colors.blue
                                            : const Color.fromARGB(
                                                255, 228, 233, 237)!,
                                        borderRadius: BorderRadius.horizontal(
                                            right: Radius.circular(10)),
                                      ),
                                      child: Container(
                                        padding: EdgeInsets.all(10),
                                        child: Column(
                                          mainAxisAlignment:
                                              MainAxisAlignment.end,
                                          crossAxisAlignment:
                                              CrossAxisAlignment.end,
                                          children: [
                                            Text(
                                              "BSE",
                                              style: TextStyle(
                                                  color: selectedMarket == 'BSE'
                                                      ? Colors.white
                                                      : Colors.grey,
                                                  fontWeight: FontWeight.bold,
                                                  fontSize: 15),
                                            ),
                                            Row(
                                              mainAxisAlignment:
                                                  MainAxisAlignment.end,
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.end,
                                              children: [
                                                Text(
                                                  marketData?.price
                                                          .toString() ??
                                                      'N/A',
                                                  style: TextStyle(
                                                    color:
                                                        selectedMarket == 'BSE'
                                                            ? Colors.white
                                                            : Colors.grey,
                                                  ),
                                                ),
                                                Text(
                                                  " (${marketData?.percentChange.toString()}%)" ??
                                                      'N/A',
                                                  style: TextStyle(
                                                    color:
                                                        selectedMarket == 'BSE'
                                                            ? Colors.white
                                                            : Colors.grey,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 10),
                          Text(
                            "Product Type",
                            style: TextStyle(color: Colors.grey),
                          ),
                          Container(
                            width: double.infinity,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: Stack(
                              children: [
                                Container(
                                  margin: EdgeInsets.only(top: 47),
                                  height: 5,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10),
                                    color: const Color.fromARGB(
                                        255, 228, 233, 237),
                                  ),
                                ),
                                Row(
                                  children: <Widget>[
                                    Expanded(
                                        child: _buildProductTypeButton('NRML')),
                                    Expanded(
                                        child: _buildProductTypeButton('MIS')),
                                    Expanded(
                                        child: _buildProductTypeButton('CNC')),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 10),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                "Shares",
                                style: TextStyle(color: Colors.grey),
                              ),
                              Text(
                                "Lots",
                                style: TextStyle(color: Colors.grey),
                              ),
                            ],
                          ),
                          SizedBox(height: 10),
                          TextFormField(
                            style: TextStyle(
                              color: Colors.black,
                            ),
                            autofocus: true,
                            textInputAction: TextInputAction.done,
                            keyboardType: TextInputType.number,
                            
                            controller: quantityController,
                            onTap: () {},
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return "Please enter quantity";
                              }
                              return null;
                            },
                            decoration: InputDecoration(
                              enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(10),
                                  borderSide:
                                      BorderSide(color: Colors.grey.shade400)),
                              hintText: "Enter Quantity",
                              labelText: "Quantity",
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                              suffixText: 'x${widget?.lotSize ?? 1}',
                            ),
                          ),
                          SizedBox(height: 10),

                          // Step 3: Use Visibility to show/hide quantity suggestions
                          Visibility(
                            visible: _showQuantitySuggestions,
                            child: _buildQuantitySuggestions(),
                          ),
                          GestureDetector(
                            onTap: () {
                              setState(() {
                                _showQuantitySuggestions =
                                    !_showQuantitySuggestions;
                              });
                            },
                            child: Container(
                              child: Text("Suggestions"),
                            ),
                          ),
                          Text(
                            "Price",
                            style: TextStyle(color: Colors.grey),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Row(
                                children: [
                                  _buildPriceButton(Icons.remove, () {
                                    double currentValue =
                                        double.tryParse(_controller.text) ?? 0;
                                    currentValue -= 1;
                                    _controller.text =
                                        currentValue.toStringAsFixed(2);
                                  }),
                                  SizedBox(width: 10),
                                  GestureDetector(
                                    onTap: () {
                                      setState(() {
                                        _showQuantitySuggestions =
                                            !_showQuantitySuggestions;
                                      });
                                    },
                                    child: Container(
                                      width: 70,
                                      child: TextFormField(
                                        controller: _controller,
                                        textAlign: TextAlign.center,
                                        readOnly: _selectedOption == 'Market',
                                        keyboardType: TextInputType.number,
                                        onTap: () {
                                          setState(() {
                                            _showQuantitySuggestions =
                                                !_showQuantitySuggestions;
                                          });
                                        },
                                        inputFormatters: <TextInputFormatter>[
                                          FilteringTextInputFormatter.allow(
                                              RegExp(r'^\d+\.?\d{0,2}')),
                                        ],
                                        validator: (value) {
                                          if (_selectedOption == 'Limit' &&
                                              value!.isEmpty) {
                                            return "Please enter price";
                                          }
                                          return null;
                                        },
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 10),
                                  _buildPriceButton(Icons.add, () {
                                    double currentValue =
                                        double.tryParse(_controller.text) ?? 0;
                                    currentValue += 1;
                                    _controller.text =
                                        currentValue.toStringAsFixed(2);
                                  }),
                                ],
                              ),
                              Row(
                                children: <Widget>[
                                  _buildOptionButton('Limit'),
                                  SizedBox(width: 5),
                                  _buildOptionButton('Market'),
                                ],
                              ),
                            ],
                          ),
                          SizedBox(height: 10),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                "Enable Stop Loss",
                                style: TextStyle(color: Colors.grey),
                              ),
                              Switch(
                                activeColor: Colors.blue,
                                inactiveTrackColor:
                                    const Color.fromARGB(255, 228, 233, 237),
                                value: _isStopLossEnabled,
                                onChanged: (value) {
                                  setState(() {
                                    _isStopLossEnabled = value;
                                  });
                                },
                              ),
                            ],
                          ),
                          Visibility(
                            visible: _isStopLossEnabled,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text("Stop Loss Trigger Price"),
                                SizedBox(height: 10),
                                TextFormField(
                                  keyboardType: TextInputType.number,
                                  controller: stopLossTriggerPriceController,
                                  validator: (value) {
                                    if (_isStopLossEnabled &&
                                        (value == null || value.isEmpty)) {
                                      return "Please enter stop loss trigger price";
                                    }
                                    return null;
                                  },
                                  decoration: InputDecoration(
                                    hintText: "Enter Stop Loss Trigger Price",
                                    labelText: "Stop Loss Trigger Price",
                                    border: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                  ),
                                ),
                                SizedBox(height: 10),
                                Text("Stop Loss Limit Price"),
                                SizedBox(height: 10),
                                TextFormField(
                                  keyboardType: TextInputType.number,
                                  controller: stopLossLimitPriceController,
                                  validator: (value) {
                                    if (_isStopLossEnabled &&
                                        (value == null || value.isEmpty)) {
                                      return "Please enter stop loss limit price";
                                    }
                                    return null;
                                  },
                                  decoration: InputDecoration(
                                    hintText: "Enter Stop Loss Limit Price",
                                    labelText: "Stop Loss Limit Price",
                                    border: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(height: 10),
                    Column(
                      children: [
                        Container(
                          child: Column(
                            children: [
                              Row(
                                children: [
                                  Text("Total Cost: "),
                                  Text(
                                    "â‚¹${totalCost.toStringAsFixed(2)}",
                                  )
                                ],
                              )
                            ],
                          ),
                        ),
                        Container(
                          child: Column(
                            children: [
                              Row(
                                children: [
                                  Text("Total Cost: "),
                                  Text(
                                    "â‚¹${totalCost.toStringAsFixed(2)}",
                                  )
                                ],
                              )
                            ],
                          ),
                        ),
                        SizedBox(height: 10),
                        Container(
                          width: double.infinity,
                          height: 50,
                          child: ElevatedButton(
                            onPressed: () async {
                              if (_formKey.currentState!.validate()) {
                                print("Form is valid");
                              } else {
                                print("Form is invalid");
                              }
                              final finalquantiy = int.parse(
                                      quantityController.text.toString()) *
                                  int.parse(widget.lotSize.toString());
                              final orderDetails = {
                                "clientID": "A0031",
                                "userID": "A0031",
                                "exchangeSegment": ExchangeConverter()
                                    .getExchangeSegmentName(
                                        int.parse(widget.exchangeSegment))
                                    .toString(),
                                "exchangeInstrumentID":
                                    widget.exchangeInstrumentId.toString(),
                                "productType": _selectedProductType,
                                "orderType": _selectedOption,
                                "orderSide": isBuy ? "BUY" : "SELL",
                                "timeInForce": "DAY",
                                "disclosedQuantity": "0",
                                "orderQuantity": finalquantiy.toString(),
                                "limitPrice": _controller.text,
                                "stopPrice": _isStopLossEnabled &&
                                        stopLossTriggerPriceController
                                            .text.isNotEmpty
                                    ? int.parse(
                                        stopLossLimitPriceController.text)
                                    : 0, //    "stopLimitPrice": _isStopLossEnabled ? stopLossLimitPriceController.text.toString() : null,
                              };

                              print(orderDetails);
                              try {
                                final response = await ApiService().placeOrder(
                                    orderDetails, widget.displayName, context);
                                // ScaffoldMessenger.of(context).showSnackBar(
                                //   SnackBar(
                                //     content: Text('Order placed successfully!'),
                                //   ),
                                // );
                              } catch (error) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content:
                                        Text('Failed to place order: $error'),
                                  ),
                                );
                              }
                            },
                            child: Text(
                                isBuy ? "Place Buy Order" : "Place Sell Order"),
                            style: ButtonStyle(
                              backgroundColor:
                                  MaterialStateProperty.all<Color>(Colors.blue),
                              foregroundColor: MaterialStateColor.resolveWith(
                                  (states) => Colors.white),
                              shape: MaterialStateProperty.all<
                                  RoundedRectangleBorder>(
                                RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                            ),
                          ),
                        ),
                        _selectedProductType == 'MIS'
                            ? Container(
                                child: Text(
                                    marketData?.percentChange.toString() ?? ''),
                              )
                            : SizedBox(height: 20),
                      ],
                    ),
                    
                  ],
                );
              }),
            ),
          ),
        ),
      ),
    );
  }

  // Step 2: Create a method to display quantity suggestions
  Widget _buildQuantitySuggestions() {
    List<int> quantities = [
      10,
      15,
      50,
      100,
      200
    ]; // Define your quantities here
    return Container(
      padding: EdgeInsets.all(5),
      decoration: BoxDecoration(
        color: Color.fromARGB(255, 228, 233, 237),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Wrap(
        children: quantities.map((quantity) {
          return Padding(
            padding: const EdgeInsets.all(8.0),
            child: ChoiceChip(
              label: Text(quantity.toString()),
              selected: quantityController == quantity,
              onSelected: (bool selected) {
                setState(() {
                  quantityController.text = quantity.toString();
                  _showQuantitySuggestions =
                      false; // Optionally hide suggestions after selection
                });
              },
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildProductTypeButton(String type) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Stack(
          children: [
            TextButton(
              style: TextButton.styleFrom(
                elevation: 0,
                overlayColor: Colors.transparent,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(0)),
                foregroundColor:
                    _selectedProductType == type ? Colors.black : Colors.black,
                backgroundColor:
                    _selectedProductType == type ? Colors.white : Colors.white,
              ),
              onPressed: () {
                setState(() {
                  _selectedProductType = type;
                });
              },
              child: Text(type),
            ),
          ],
        ),
        Container(
          height: 4,
          width: 120,
          decoration: BoxDecoration(
            color: _selectedProductType == type
                ? Colors.blue
                : const Color.fromARGB(255, 225, 228, 230)!,
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      ],
    );
  }

  Widget _buildOptionButton(String option) {
    return TextButton(
      style: TextButton.styleFrom(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        foregroundColor:
            _selectedOption == option ? Colors.white : Colors.black,
        backgroundColor: _selectedOption == option
            ? Colors.blue
            : const Color.fromARGB(255, 228, 233, 237),
        disabledForegroundColor: Colors.grey.withOpacity(0.38),
      ),
      onPressed: () {
        setState(() {
          _selectedOption = option;
        });
      },
      child: Text(option),
    );
  }

  Widget _buildPriceButton(IconData icon, VoidCallback onPressed) {
    return Container(
      decoration: BoxDecoration(
        color: const Color.fromARGB(255, 228, 233, 237),
        borderRadius: BorderRadius.circular(10),
      ),
      child: IconButton(
        icon: Icon(icon, color: Colors.blue),
        onPressed: _selectedOption == 'Limit' ? onPressed : null,
      ),
    );
  }
}
