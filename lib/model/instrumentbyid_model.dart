class Autogenerated {
  String? type;
  String? code;
  String? description;
  Result? result;

  Autogenerated({this.type, this.code, this.description, this.result});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    type = json['type'];
    code = json['code'];
    description = json['description'];
    result =
        json['result'] != null ? new Result.fromJson(json['result']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['type'] = this.type;
    data['code'] = this.code;
    data['description'] = this.description;
    if (this.result != null) {
      data['result'] = this.result!.toJson();
    }
    return data;
  }
}

class Result {
  String? aGM;
  String? allOrNone;
  String? bonus;
  String? dividend;
  String? eGM;
  AuctionDetailInfo? auctionDetailInfo;
  String? eLMargin;
  String? interest;
  String? iSIN;
  String? minimumFill;
  String? rights;
  String? vaRMargin;
  String? issuedCapital;
  String? boardLotQuantity;
  String? faceValue;
  String? spread;
  String? callAuction1Flag;
  String? gSMIndicator;
  String? settlementNo;
  String? instrumentID;
  String? exchangeInstrumentID;
  String? preferredExchangeInstrumentID;
  String? preferredExchangeSegment;
  String? oppositeExchangeInstrumentID;
  String? oppositeExchangeSegment;
  String? displayName;
  String? name;
  String? auctionNumber;
  String? minimumQty;
  String? quantityMutliplier;
  String? mutliplier;
  String? priceNumerator;
  String? priceDenominator;
  String? lotSize;
  String? instrumentType;
  String? symbolType;
  String? cfiCode;
  String? status;
  String? ticksPerPoint;
  String? tickSize;
  String? description;
  String? isImpliedMarket;
  String? isTradeable;
  String? exchangeSegment;
  String? series;
  String? maxTradeVolume;
  PriceBand? priceBand;
  String? decimalDisplace;
  ExtendedMarketProperties? extendedMarketProperties;
  MarketTypeStatusEligibility? marketTypeStatusEligibility;
  String? nameWithExchange;
  String? nameWithSeries;
  String? displayNameWithExchange;
  String? displayNameWithSeries;
  String? displayNameWithSeriesAndExchange;
  String? freezeQty;
  String? lastUpdateTime;
  String? fiftyTwoWeekHigh;
  String? fiftyTwoWeekLow;
  Bhavcopy? bhavcopy;
  String? additionalPreExpiryMarginPerc;
  String? additionalMarginPercLong;
  String? additionalMarginPercShort;
  String? deliveryMarginPerc;
  String? specialMarginPercBuy;
  String? specialMarginPercSell;
  String? tenderMargin;
  String? eLMLongMargin;
  String? eLMShortMargin;
  String? initialMarginPerc;
  String? exposureMarginPerc;
  String? callAuctionIndicator;
  String? marketType;
  String? currentEligibleMarketType;
  String? industry;

  Result(
      {this.aGM,
      this.allOrNone,
      this.bonus,
      this.dividend,
      this.eGM,
      this.auctionDetailInfo,
      this.eLMargin,
      this.interest,
      this.iSIN,
      this.minimumFill,
      this.rights,
      this.vaRMargin,
      this.issuedCapital,
      this.boardLotQuantity,
      this.faceValue,
      this.spread,
      this.callAuction1Flag,
      this.gSMIndicator,
      this.settlementNo,
      this.instrumentID,
      this.exchangeInstrumentID,
      this.preferredExchangeInstrumentID,
      this.preferredExchangeSegment,
      this.oppositeExchangeInstrumentID,
      this.oppositeExchangeSegment,
      this.displayName,
      this.name,
      this.auctionNumber,
      this.minimumQty,
      this.quantityMutliplier,
      this.mutliplier,
      this.priceNumerator,
      this.priceDenominator,
      this.lotSize,
      this.instrumentType,
      this.symbolType,
      this.cfiCode,
      this.status,
      this.ticksPerPoint,
      this.tickSize,
      this.description,
      this.isImpliedMarket,
      this.isTradeable,
      this.exchangeSegment,
      this.series,
      this.maxTradeVolume,
      this.priceBand,
      this.decimalDisplace,
      this.extendedMarketProperties,
      this.marketTypeStatusEligibility,
      this.nameWithExchange,
      this.nameWithSeries,
      this.displayNameWithExchange,
      this.displayNameWithSeries,
      this.displayNameWithSeriesAndExchange,
      this.freezeQty,
      this.lastUpdateTime,
      this.fiftyTwoWeekHigh,
      this.fiftyTwoWeekLow,
      this.bhavcopy,
      this.additionalPreExpiryMarginPerc,
      this.additionalMarginPercLong,
      this.additionalMarginPercShort,
      this.deliveryMarginPerc,
      this.specialMarginPercBuy,
      this.specialMarginPercSell,
      this.tenderMargin,
      this.eLMLongMargin,
      this.eLMShortMargin,
      this.initialMarginPerc,
      this.exposureMarginPerc,
      this.callAuctionIndicator,
      this.marketType,
      this.currentEligibleMarketType,
      this.industry});

  Result.fromJson(Map<String, dynamic> json) {
    aGM = json['AGM'].toString();
    allOrNone = json['AllOrNone'].toString();
    bonus = json['Bonus'].toString();
    dividend = json['Dividend'].toString();
    eGM = json['EGM'].toString();
    auctionDetailInfo = json['AuctionDetailInfo'] != null
        ? new AuctionDetailInfo.fromJson(json['AuctionDetailInfo'])
        : null;
    eLMargin = json['ELMargin'].toString();
    interest = json['Interest'].toString();
    iSIN = json['ISIN'].toString();
    minimumFill = json['MinimumFill'].toString();
    rights = json['Rights'].toString();
    vaRMargin = json['VaRMargin'].toString();
    issuedCapital = json['IssuedCapital'].toString();
    boardLotQuantity = json['BoardLotQuantity'].toString();
    faceValue = json['FaceValue'].toString();
    spread = json['Spread'].toString();
    callAuction1Flag = json['CallAuction1Flag'].toString();
    gSMIndicator = json['GSMIndicator'].toString();
    settlementNo = json['SettlementNo'].toString();
    instrumentID = json['InstrumentID'].toString();
    exchangeInstrumentID = json['ExchangeInstrumentID'].toString();
    preferredExchangeInstrumentID = json['PreferredExchangeInstrumentID'].toString();
    preferredExchangeSegment = json['PreferredExchangeSegment'].toString();
    oppositeExchangeInstrumentID = json['OppositeExchangeInstrumentID'].toString();
    oppositeExchangeSegment = json['OppositeExchangeSegment'].toString();
    displayName = json['DisplayName'].toString();
    name = json['Name'].toString();
    auctionNumber = json['AuctionNumber'].toString();
    minimumQty = json['MinimumQty'].toString();
    quantityMutliplier = json['QuantityMutliplier'].toString();
    mutliplier = json['Mutliplier'].toString();
    priceNumerator = json['PriceNumerator'].toString();
    priceDenominator = json['PriceDenominator'].toString();
    lotSize = json['LotSize'].toString();
    instrumentType = json['InstrumentType'].toString();
    symbolType = json['SymbolType'].toString();
    cfiCode = json['CfiCode'].toString();
    status = json['Status'].toString();
    ticksPerPoint = json['TicksPerPoint'].toString();
    tickSize = json['TickSize'].toString();
    description = json['Description'].toString();
    isImpliedMarket = json['IsImpliedMarket'].toString();
    isTradeable = json['IsTradeable'].toString();
    exchangeSegment = json['ExchangeSegment'].toString();
    series = json['Series'].toString();
    maxTradeVolume = json['MaxTradeVolume'].toString();
    priceBand = json['PriceBand'] != null
        ? new PriceBand.fromJson(json['PriceBand'])
        : null;
    decimalDisplace = json['DecimalDisplace'].toString();
    extendedMarketProperties = json['ExtendedMarketProperties'] != null
        ? new ExtendedMarketProperties.fromJson(
            json['ExtendedMarketProperties'])
        : null;
    marketTypeStatusEligibility = json['MarketTypeStatusEligibility'] != null
        ? new MarketTypeStatusEligibility.fromJson(
            json['MarketTypeStatusEligibility'])
        : null;
    nameWithExchange = json['NameWithExchange'].toString();
    nameWithSeries = json['NameWithSeries'].toString();
    displayNameWithExchange = json['DisplayNameWithExchange'].toString();
    displayNameWithSeries = json['DisplayNameWithSeries'].toString();
    displayNameWithSeriesAndExchange = json['DisplayNameWithSeriesAndExchange'].toString();
    freezeQty = json['FreezeQty'].toString();
    lastUpdateTime = json['LastUpdateTime'].toString();
    fiftyTwoWeekHigh = json['FiftyTwoWeekHigh'].toString();
    fiftyTwoWeekLow = json['FiftyTwoWeekLow'].toString();
    bhavcopy = json['Bhavcopy'] != null
        ? new Bhavcopy.fromJson(json['Bhavcopy'])
        : null;
    additionalPreExpiryMarginPerc = json['AdditionalPreExpiryMarginPerc'].toString();
    additionalMarginPercLong = json['AdditionalMarginPercLong'].toString();
    additionalMarginPercShort = json['AdditionalMarginPercShort'].toString();
    deliveryMarginPerc = json['DeliveryMarginPerc'].toString();
    specialMarginPercBuy = json['SpecialMarginPercBuy'].toString();
    specialMarginPercSell = json['SpecialMarginPercSell'].toString();
    tenderMargin = json['TenderMargin'].toString();
    eLMLongMargin = json['ELMLongMargin'].toString();
    eLMShortMargin = json['ELMShortMargin'].toString();
    initialMarginPerc = json['InitialMarginPerc'].toString();
    exposureMarginPerc = json['ExposureMarginPerc'].toString();
    callAuctionIndicator = json['CallAuctionIndicator'].toString();
    marketType = json['MarketType'].toString();
    currentEligibleMarketType = json['CurrentEligibleMarketType'].toString();
    industry = json['Industry'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['AGM'] = this.aGM;
    data['AllOrNone'] = this.allOrNone;
    data['Bonus'] = this.bonus;
    data['Dividend'] = this.dividend;
    data['EGM'] = this.eGM;
    if (this.auctionDetailInfo != null) {
      data['AuctionDetailInfo'] = this.auctionDetailInfo!.toJson();
    }
    data['ELMargin'] = this.eLMargin;
    data['Interest'] = this.interest;
    data['ISIN'] = this.iSIN;
    data['MinimumFill'] = this.minimumFill;
    data['Rights'] = this.rights;
    data['VaRMargin'] = this.vaRMargin;
    data['IssuedCapital'] = this.issuedCapital;
    data['BoardLotQuantity'] = this.boardLotQuantity;
    data['FaceValue'] = this.faceValue;
    data['Spread'] = this.spread;
    data['CallAuction1Flag'] = this.callAuction1Flag;
    data['GSMIndicator'] = this.gSMIndicator;
    data['SettlementNo'] = this.settlementNo;
    data['InstrumentID'] = this.instrumentID;
    data['ExchangeInstrumentID'] = this.exchangeInstrumentID;
    data['PreferredExchangeInstrumentID'] = this.preferredExchangeInstrumentID;
    data['PreferredExchangeSegment'] = this.preferredExchangeSegment;
    data['OppositeExchangeInstrumentID'] = this.oppositeExchangeInstrumentID;
    data['OppositeExchangeSegment'] = this.oppositeExchangeSegment;
    data['DisplayName'] = this.displayName;
    data['Name'] = this.name;
    data['AuctionNumber'] = this.auctionNumber;
    data['MinimumQty'] = this.minimumQty;
    data['QuantityMutliplier'] = this.quantityMutliplier;
    data['Mutliplier'] = this.mutliplier;
    data['PriceNumerator'] = this.priceNumerator;
    data['PriceDenominator'] = this.priceDenominator;
    data['LotSize'] = this.lotSize;
    data['InstrumentType'] = this.instrumentType;
    data['SymbolType'] = this.symbolType;
    data['CfiCode'] = this.cfiCode;
    data['Status'] = this.status;
    data['TicksPerPoint'] = this.ticksPerPoint;
    data['TickSize'] = this.tickSize;
    data['Description'] = this.description;
    data['IsImpliedMarket'] = this.isImpliedMarket;
    data['IsTradeable'] = this.isTradeable;
    data['ExchangeSegment'] = this.exchangeSegment;
    data['Series'] = this.series;
    data['MaxTradeVolume'] = this.maxTradeVolume;
    if (this.priceBand != null) {
      data['PriceBand'] = this.priceBand!.toJson();
    }
    data['DecimalDisplace'] = this.decimalDisplace;
    if (this.extendedMarketProperties != null) {
      data['ExtendedMarketProperties'] =
          this.extendedMarketProperties!.toJson();
    }
    if (this.marketTypeStatusEligibility != null) {
      data['MarketTypeStatusEligibility'] =
          this.marketTypeStatusEligibility!.toJson();
    }
    data['NameWithExchange'] = this.nameWithExchange;
    data['NameWithSeries'] = this.nameWithSeries;
    data['DisplayNameWithExchange'] = this.displayNameWithExchange;
    data['DisplayNameWithSeries'] = this.displayNameWithSeries;
    data['DisplayNameWithSeriesAndExchange'] =
        this.displayNameWithSeriesAndExchange;
    data['FreezeQty'] = this.freezeQty;
    data['LastUpdateTime'] = this.lastUpdateTime;
    data['FiftyTwoWeekHigh'] = this.fiftyTwoWeekHigh;
    data['FiftyTwoWeekLow'] = this.fiftyTwoWeekLow;
    if (this.bhavcopy != null) {
      data['Bhavcopy'] = this.bhavcopy!.toJson();
    }
    data['AdditionalPreExpiryMarginPerc'] = this.additionalPreExpiryMarginPerc;
    data['AdditionalMarginPercLong'] = this.additionalMarginPercLong;
    data['AdditionalMarginPercShort'] = this.additionalMarginPercShort;
    data['DeliveryMarginPerc'] = this.deliveryMarginPerc;
    data['SpecialMarginPercBuy'] = this.specialMarginPercBuy;
    data['SpecialMarginPercSell'] = this.specialMarginPercSell;
    data['TenderMargin'] = this.tenderMargin;
    data['ELMLongMargin'] = this.eLMLongMargin;
    data['ELMShortMargin'] = this.eLMShortMargin;
    data['InitialMarginPerc'] = this.initialMarginPerc;
    data['ExposureMarginPerc'] = this.exposureMarginPerc;
    data['CallAuctionIndicator'] = this.callAuctionIndicator;
    data['MarketType'] = this.marketType;
    data['CurrentEligibleMarketType'] = this.currentEligibleMarketType;
    data['Industry'] = this.industry;
    return data;
  }
}

class AuctionDetailInfo {
  String? auctionNumber;
  String? auctionStatus;
  String? initiatorType;
  String? settlementPeriod;
  String? totalBuyQty;
  String? totalSellQty;
  String? auctionQty;
  String? auctionPrice;
  String? bestBuyPrice;
  String? bestSellPrice;

  AuctionDetailInfo(
      {this.auctionNumber,
      this.auctionStatus,
      this.initiatorType,
      this.settlementPeriod,
      this.totalBuyQty,
      this.totalSellQty,
      this.auctionQty,
      this.auctionPrice,
      this.bestBuyPrice,
      this.bestSellPrice});

  AuctionDetailInfo.fromJson(Map<String, dynamic> json) {
    auctionNumber = json['AuctionNumber'].toString();
    auctionStatus = json['AuctionStatus'].toString();
    initiatorType = json['InitiatorType'].toString();
    settlementPeriod = json['SettlementPeriod'].toString();
    totalBuyQty = json['TotalBuyQty'].toString();
    totalSellQty = json['TotalSellQty'].toString();
    auctionQty = json['AuctionQty'].toString();
    auctionPrice = json['AuctionPrice'].toString();
    bestBuyPrice = json['BestBuyPrice'].toString();
    bestSellPrice = json['BestSellPrice'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['AuctionNumber'] = this.auctionNumber;
    data['AuctionStatus'] = this.auctionStatus;
    data['InitiatorType'] = this.initiatorType;
    data['SettlementPeriod'] = this.settlementPeriod;
    data['TotalBuyQty'] = this.totalBuyQty;
    data['TotalSellQty'] = this.totalSellQty;
    data['AuctionQty'] = this.auctionQty;
    data['AuctionPrice'] = this.auctionPrice;
    data['BestBuyPrice'] = this.bestBuyPrice;
    data['BestSellPrice'] = this.bestSellPrice;
    return data;
  }
}

class PriceBand {
  String? high;
  String? low;
  String? highString;
  String? lowString;
  String? creditRating;
  String? highExecBandString;
  String? lowExecBandString;
  String? highExecBand;
  String? lowExecBand;
  String? tERRange;

  PriceBand(
      {this.high,
      this.low,
      this.highString,
      this.lowString,
      this.creditRating,
      this.highExecBandString,
      this.lowExecBandString,
      this.highExecBand,
      this.lowExecBand,
      this.tERRange});

  PriceBand.fromJson(Map<String, dynamic> json) {
    high = json['High'].toString();
    low = json['Low'].toString();
    highString = json['HighString'].toString();
    lowString = json['LowString'].toString();
    creditRating = json['CreditRating'].toString();
    highExecBandString = json['HighExecBandString'].toString();
    lowExecBandString = json['LowExecBandString'].toString();
    highExecBand = json['HighExecBand'].toString();
    lowExecBand = json['LowExecBand'].toString();
    tERRange = json['TERRange'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['High'] = this.high;
    data['Low'] = this.low;
    data['HighString'] = this.highString;
    data['LowString'] = this.lowString;
    data['CreditRating'] = this.creditRating;
    data['HighExecBandString'] = this.highExecBandString;
    data['LowExecBandString'] = this.lowExecBandString;
    data['HighExecBand'] = this.highExecBand;
    data['LowExecBand'] = this.lowExecBand;
    data['TERRange'] = this.tERRange;
    return data;
  }
}

class ExtendedMarketProperties {
  CallAuctionIndicator? callAuctionIndicator;
  CallAuctionIndicator? expulsionDate;
  CallAuctionIndicator? issueMaturityDate;
  CallAuctionIndicator? reAdmissionDate;
  CallAuctionIndicator? corporateAction;
  CallAuctionIndicator? noDeliveryEndDate;
  CallAuctionIndicator? issueRate;
  CallAuctionIndicator? settlementNo;
  CallAuctionIndicator? interestPaymentDate;
  CallAuctionIndicator? listingDate;
  CallAuctionIndicator? companyName;
  CallAuctionIndicator? uniqueKey;
  CallAuctionIndicator? creditRating;
  CallAuctionIndicator? recordDate;
  CallAuctionIndicator? noDeliveryStartDate;
  CallAuctionIndicator? marketType;
  CallAuctionIndicator? bookClosureStartDate;
  CallAuctionIndicator? exDate;
  CallAuctionIndicator? warningPercent;
  CallAuctionIndicator? issueStartDate;
  CallAuctionIndicator? bookClosureEndDate;
  CallAuctionIndicator? remarks;

  ExtendedMarketProperties(
      {this.callAuctionIndicator,
      this.expulsionDate,
      this.issueMaturityDate,
      this.reAdmissionDate,
      this.corporateAction,
      this.noDeliveryEndDate,
      this.issueRate,
      this.settlementNo,
      this.interestPaymentDate,
      this.listingDate,
      this.companyName,
      this.uniqueKey,
      this.creditRating,
      this.recordDate,
      this.noDeliveryStartDate,
      this.marketType,
      this.bookClosureStartDate,
      this.exDate,
      this.warningPercent,
      this.issueStartDate,
      this.bookClosureEndDate,
      this.remarks});

  ExtendedMarketProperties.fromJson(Map<String, dynamic> json) {
    callAuctionIndicator = json['CallAuctionIndicator'] != null
        ? new CallAuctionIndicator.fromJson(json['CallAuctionIndicator'])
        : null;
    expulsionDate = json['ExpulsionDate'] != null
        ? new CallAuctionIndicator.fromJson(json['ExpulsionDate'])
        : null;
    issueMaturityDate = json['IssueMaturityDate'] != null
        ? new CallAuctionIndicator.fromJson(json['IssueMaturityDate'])
        : null;
    reAdmissionDate = json['ReAdmissionDate'] != null
        ? new CallAuctionIndicator.fromJson(json['ReAdmissionDate'])
        : null;
    corporateAction = json['CorporateAction'] != null
        ? new CallAuctionIndicator.fromJson(json['CorporateAction'])
        : null;
    noDeliveryEndDate = json['NoDeliveryEndDate'] != null
        ? new CallAuctionIndicator.fromJson(json['NoDeliveryEndDate'])
        : null;
    issueRate = json['IssueRate'] != null
        ? new CallAuctionIndicator.fromJson(json['IssueRate'])
        : null;
    settlementNo = json['SettlementNo'] != null
        ? new CallAuctionIndicator.fromJson(json['SettlementNo'])
        : null;
    interestPaymentDate = json['InterestPaymentDate'] != null
        ? new CallAuctionIndicator.fromJson(json['InterestPaymentDate'])
        : null;
    listingDate = json['ListingDate'] != null
        ? new CallAuctionIndicator.fromJson(json['ListingDate'])
        : null;
    companyName = json['CompanyName'] != null
        ? new CallAuctionIndicator.fromJson(json['CompanyName'])
        : null;
    uniqueKey = json['UniqueKey'] != null
        ? new CallAuctionIndicator.fromJson(json['UniqueKey'])
        : null;
    creditRating = json['CreditRating'] != null
        ? new CallAuctionIndicator.fromJson(json['CreditRating'])
        : null;
    recordDate = json['RecordDate'] != null
        ? new CallAuctionIndicator.fromJson(json['RecordDate'])
        : null;
    noDeliveryStartDate = json['NoDeliveryStartDate'] != null
        ? new CallAuctionIndicator.fromJson(json['NoDeliveryStartDate'])
        : null;
    marketType = json['MarketType'] != null
        ? new CallAuctionIndicator.fromJson(json['MarketType'])
        : null;
    bookClosureStartDate = json['BookClosureStartDate'] != null
        ? new CallAuctionIndicator.fromJson(json['BookClosureStartDate'])
        : null;
    exDate = json['ExDate'] != null
        ? new CallAuctionIndicator.fromJson(json['ExDate'])
        : null;
    warningPercent = json['WarningPercent'] != null
        ? new CallAuctionIndicator.fromJson(json['WarningPercent'])
        : null;
    issueStartDate = json['IssueStartDate'] != null
        ? new CallAuctionIndicator.fromJson(json['IssueStartDate'])
        : null;
    bookClosureEndDate = json['BookClosureEndDate'] != null
        ? new CallAuctionIndicator.fromJson(json['BookClosureEndDate'])
        : null;
    remarks = json['Remarks'] != null
        ? new CallAuctionIndicator.fromJson(json['Remarks'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.callAuctionIndicator != null) {
      data['CallAuctionIndicator'] = this.callAuctionIndicator!.toJson();
    }
    if (this.expulsionDate != null) {
      data['ExpulsionDate'] = this.expulsionDate!.toJson();
    }
    if (this.issueMaturityDate != null) {
      data['IssueMaturityDate'] = this.issueMaturityDate!.toJson();
    }
    if (this.reAdmissionDate != null) {
      data['ReAdmissionDate'] = this.reAdmissionDate!.toJson();
    }
    if (this.corporateAction != null) {
      data['CorporateAction'] = this.corporateAction!.toJson();
    }
    if (this.noDeliveryEndDate != null) {
      data['NoDeliveryEndDate'] = this.noDeliveryEndDate!.toJson();
    }
    if (this.issueRate != null) {
      data['IssueRate'] = this.issueRate!.toJson();
    }
    if (this.settlementNo != null) {
      data['SettlementNo'] = this.settlementNo!.toJson();
    }
    if (this.interestPaymentDate != null) {
      data['InterestPaymentDate'] = this.interestPaymentDate!.toJson();
    }
    if (this.listingDate != null) {
      data['ListingDate'] = this.listingDate!.toJson();
    }
    if (this.companyName != null) {
      data['CompanyName'] = this.companyName!.toJson();
    }
    if (this.uniqueKey != null) {
      data['UniqueKey'] = this.uniqueKey!.toJson();
    }
    if (this.creditRating != null) {
      data['CreditRating'] = this.creditRating!.toJson();
    }
    if (this.recordDate != null) {
      data['RecordDate'] = this.recordDate!.toJson();
    }
    if (this.noDeliveryStartDate != null) {
      data['NoDeliveryStartDate'] = this.noDeliveryStartDate!.toJson();
    }
    if (this.marketType != null) {
      data['MarketType'] = this.marketType!.toJson();
    }
    if (this.bookClosureStartDate != null) {
      data['BookClosureStartDate'] = this.bookClosureStartDate!.toJson();
    }
    if (this.exDate != null) {
      data['ExDate'] = this.exDate!.toJson();
    }
    if (this.warningPercent != null) {
      data['WarningPercent'] = this.warningPercent!.toJson();
    }
    if (this.issueStartDate != null) {
      data['IssueStartDate'] = this.issueStartDate!.toJson();
    }
    if (this.bookClosureEndDate != null) {
      data['BookClosureEndDate'] = this.bookClosureEndDate!.toJson();
    }
    if (this.remarks != null) {
      data['Remarks'] = this.remarks!.toJson();
    }
    return data;
  }
}

class CallAuctionIndicator {
  String? name;
  String? value;

  CallAuctionIndicator({this.name, this.value});

  CallAuctionIndicator.fromJson(Map<String, dynamic> json) {
    name = json['Name'].toString();
    value = json['Value'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Name'] = this.name;
    data['Value'] = this.value;
    return data;
  }
}

class MarketTypeStatusEligibility {
  Normal? normal;
  Normal? oddLot;
  Normal? retailDebt;
  Normal? auction;
  Normal? callAuction1;
  Normal? callAuction2;

  MarketTypeStatusEligibility(
      {this.normal,
      this.oddLot,
      this.retailDebt,
      this.auction,
      this.callAuction1,
      this.callAuction2});

  MarketTypeStatusEligibility.fromJson(Map<String, dynamic> json) {
    normal =
        json['Normal'] != null ? new Normal.fromJson(json['Normal']) : null;
    oddLot =
        json['OddLot'] != null ? new Normal.fromJson(json['OddLot']) : null;
    retailDebt = json['RetailDebt'] != null
        ? new Normal.fromJson(json['RetailDebt'])
        : null;
    auction =
        json['Auction'] != null ? new Normal.fromJson(json['Auction']) : null;
    callAuction1 = json['CallAuction1'] != null
        ? new Normal.fromJson(json['CallAuction1'])
        : null;
    callAuction2 = json['CallAuction2'] != null
        ? new Normal.fromJson(json['CallAuction2'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.normal != null) {
      data['Normal'] = this.normal!.toJson();
    }
    if (this.oddLot != null) {
      data['OddLot'] = this.oddLot!.toJson();
    }
    if (this.retailDebt != null) {
      data['RetailDebt'] = this.retailDebt!.toJson();
    }
    if (this.auction != null) {
      data['Auction'] = this.auction!.toJson();
    }
    if (this.callAuction1 != null) {
      data['CallAuction1'] = this.callAuction1!.toJson();
    }
    if (this.callAuction2 != null) {
      data['CallAuction2'] = this.callAuction2!.toJson();
    }
    return data;
  }
}

class Normal {
  String? marketType;
  String? eligibile;
  String? tradingStatus;

  Normal({this.marketType, this.eligibile, this.tradingStatus});

  Normal.fromJson(Map<String, dynamic> json) {
    marketType = json['MarketType'].toString();
    eligibile = json['Eligibile'].toString();
    tradingStatus = json['TradingStatus'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['MarketType'] = this.marketType;
    data['Eligibile'] = this.eligibile;
    data['TradingStatus'] = this.tradingStatus;
    return data;
  }
}

class Bhavcopy {
  String? open;
  String? high;
  String? low;
  String? close;
  String? totTrdQty;
  String? totTrdVal;
  String? timeStamp;
  String? totalTrades;
  String? openInterest;
  String? settlementPrice;

  Bhavcopy(
      {this.open,
      this.high,
      this.low,
      this.close,
      this.totTrdQty,
      this.totTrdVal,
      this.timeStamp,
      this.totalTrades,
      this.openInterest,
      this.settlementPrice});

  Bhavcopy.fromJson(Map<String, dynamic> json) {
    open = json['Open'].toString();
    high = json['High'].toString();
    low = json['Low'].toString();
    close = json['Close'].toString();
    totTrdQty = json['TotTrdQty'].toString();
    totTrdVal = json['TotTrdVal'].toString();
    timeStamp = json['TimeStamp'].toString();
    totalTrades = json['TotalTrades'].toString();
    openInterest = json['OpenInterest'].toString();
    settlementPrice = json['SettlementPrice'].toString();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Open'] = this.open;
    data['High'] = this.high;
    data['Low'] = this.low;
    data['Close'] = this.close;
    data['TotTrdQty'] = this.totTrdQty;
    data['TotTrdVal'] = this.totTrdVal;
    data['TimeStamp'] = this.timeStamp;
    data['TotalTrades'] = this.totalTrades;
    data['OpenInterest'] = this.openInterest;
    data['SettlementPrice'] = this.settlementPrice;
    return data;
  }
}
